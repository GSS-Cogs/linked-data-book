[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"website work--progress “Creating Linked Open Statistical Data”. book teach producers data statistics turn data 5⭐ linked open data.Since 2016, UK’s Office National Statistics (ONS) supported Government Statistical Service (GSS) proving potential statistical data transformed 5⭐ linked open data. goal encourage data producers create share data way interoperable reusable using open standards.book serves two purposes:provide practical guide data statistics producers create 5⭐ linked open data sharing tools methods.share experiences application open standards wider linked open data community, others may continue build upon work. content available Open Government Licence v3.0, except otherwise stated.","code":""},{"path":"about-this-book.html","id":"about-this-book","chapter":"About this book","heading":"About this book","text":"","code":""},{"path":"about-this-book.html","id":"how-this-book-is-organised","chapter":"About this book","heading":"How this book is organised","text":"TODO: Explain chapters book.","code":""},{"path":"about-this-book.html","id":"prerequisites","chapter":"About this book","heading":"Prerequisites","text":"beginning chapters suitable data statistics producers prior knowledge linked data, basic knowledge R Python. readers without programming experience, recommend “R Data Science” Hadley Wickham Garrett Grolemund introduction R statistical programming language.Later chapters explain data architecture, use open standards, issues debates ’ve along way. already familiar linked data semantic web may wish skip ahead.","code":""},{"path":"about-this-book.html","id":"colophon","chapter":"About this book","heading":"Colophon","text":"book written using bookdown. complete source available GitHub.version book built R version 4.1.0 (2021-05-18) following packages:","code":""},{"path":"introduction.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"UK government publishes statistics openly, typically presentational spreadsheets. publishing statistics spreadsheets succeed getting important information public domain, recognise still barriers challenges accessing using data produce:user must locate navigate many large spreadsheets understand data available.Metadata provided unstructured unstandardised way.Analysts need data wrangle data provided unstandardised presentational formats.Data silos, making difficult link relate statistics different sources.Accessibility, usability, inclusion statistics data varies dataset dataset.can use spreadsheet represent underlying data multiple ways, analysts begun adopting tidy data unofficial standard statistical data. describe use tidy data detail Section 2.1, summarise, tidy data set data structures designed make easier work share data.spreadsheets often carrying multiple functions time - storing, describing, presenting performing calculations data - packages unpivotr databaker now exist extract bare statistical data tidy format, conveniently shaped analysis.Tidy data helps make data easily accessible usable analysts, still need metadata - know data available, meaning data , use ? Metadata provides important context, essential making sense data making decisions use . examples metadata required include:1Datasets titles, descriptions, creators, sources, licences, metadata, provide important context alongside actual data .year column represent calendar year represent different type year - UK’s tax year spans April March, whereas academic year begins September.weight column represent weight kilos, different dataset represent weight pounds, categorisation different weights light heavy, making difficult relate data.column may contain codes 02 03 need additional metadata explain stand “forestry logging” \"fishing aquaculture\".think challenges can solved using linked data, open data standard proposed Sir Tim Berners-Lee, inventor World Wide Web.2","code":""},{"path":"introduction.html","id":"what-is-linked-data","chapter":"1 Introduction","heading":"1.1 What is linked data?","text":"Linked data way publishing data means information interoperable, connected meaningful. giving searchable common identifiers data items, becomes possible link data together find data.Statistical releases spreadsheets often include cover sheet metadata titles, descriptions methodological information. human able recognise information, data structured way computer can understand.W3C share analogy3:Let’s say ’re going grocery store. grocery store, get box cereal, right? , go self-checkout, shout computer, “buying box cereal!”course, day age, computer doesn’t understand . just says, “Please slide item across reader…”find bar code cereal. slide past laser reader. Suddenly- bingo. computer knows item , much costs, many ’ve bought far, etc., etc., etc.,. Computers don’t yet know just “look” item, know .[…] SemanticWeb like bar codes web.Search engines encourage website owners include structured data websites. providing context data website represents, Google able cater search results better meet needs user.4 search GDP UK Google receive chart showing GDP UK compares GDP UK , similar countries.using linked data, machine able understand context statistics display results way convenient user.","code":""},{"path":"introduction.html","id":"principles","chapter":"1 Introduction","heading":"1.1.1 Principles","text":"design issue, Berners-Lee (2006) set four principles linked data:Use URIs names things.Use HTTP URIs people can look names.someone looks URI, provide useful information, using standards (RDF, SPARQL).Include links URIs, can discover things.can describe principles detail:URI (Uniform Resource Identifier) string characters used identify resource, https://www.google.com, urn:isbn:0-14-013629-0 spotify:track:4JEylZNW8SbO4zUyfVrpb7. creating linked data, give data items refer things URIs.URI (Uniform Resource Identifier) string characters used identify resource, https://www.google.com, urn:isbn:0-14-013629-0 spotify:track:4JEylZNW8SbO4zUyfVrpb7. creating linked data, give data items refer things URIs.URIs assign hypertext transfer protocol (HTTP) URIs, beginning http://. Entering HTTP URI web browser make browser interpret URI web address. browser guide user information resource.5The URIs assign hypertext transfer protocol (HTTP) URIs, beginning http://. Entering HTTP URI web browser make browser interpret URI web address. browser guide user information resource.5A machine looking HTTP URI provided data resource, expressed using Resource Description Framework (RDF).6 RDF statement like sentence resource, \n<http://example.org/-statistics> dcterms:title \"Example Statistics\", \n<http://www.ross.com/> foaf:knows <http://www.alex.com/>.\nRDF isn’t specific data format, standardised model providing information resources. describe RDF detail .machine looking HTTP URI provided data resource, expressed using Resource Description Framework (RDF).6 RDF statement like sentence resource, <http://example.org/-statistics> dcterms:title \"Example Statistics\", <http://www.ross.com/> foaf:knows <http://www.alex.com/>.RDF isn’t specific data format, standardised model providing information resources. describe RDF detail .Using RDF can define relationships URIs, can discover information thing described URI. example, might link book’s URI URI book’s author, URI book’s publisher.Using RDF can define relationships URIs, can discover information thing described URI. example, might link book’s URI URI book’s author, URI book’s publisher.","code":""},{"path":"introduction.html","id":"linked-open-data","chapter":"1 Introduction","heading":"1.1.2 Linked open data","text":"TODO: Explain stars.⭐ Available web (whatever format) open licence, Open Data⭐⭐ Available machine-readable structured data (e.g. excel instead image scan table)⭐⭐⭐ (2) plus non-proprietary format (e.g. CSV instead excel)⭐⭐⭐⭐ plus, Use open standards W3C (RDF SPARQL) identify things, people can point stuff⭐⭐⭐⭐⭐ , plus: Link data people’s data provide contextData can linked, get star, data needs open licence.https://w3c.github.io/dwbp/bp.html","code":""},{"path":"introduction.html","id":"about-rdf","chapter":"1 Introduction","heading":"1.1.3 About RDF","text":"RDF Primer:RDF allows us make statements resources. format statements simple. statement always following structure: <subject> <predicate> <object>.RDF statement expresses relationship two resources. subject object represent two resources related; predicate represents nature relationship. relationship phrased directional way (subject object) called RDF property. RDF statements consist three elements called triples.example, http://statistics.data.gov.uk/id/statistical-geography/W92000004 URI associated ONS Geography code Wales. machine looking URI find:indicates “official name” resource URI http://statistics.data.gov.uk/id/statistical-geography/W92000004 “Wales” form triple:subject http://statistics.data.gov.uk/id/statistical-geography/W92000004,predicate http://statistics.data.gov.uk/def/statistical-geography/officialName,object \"Wales\".format known turtle (Terse RDF Triple Language). prefixes sgid sgdef shorthand - humans try read RDF can difficult decipher lines long URIs.RDF statement shown visually :","code":"@prefix sgid: <http://statistics.data.gov.uk/id/statistical-geography/> .\n@prefix sgdef: <http://statistics.data.gov.uk/def/statistical-geography/> .\n\n# subject      # predicate        # object\nsgid:W92000004 sgdef:officialName \"Wales\" ."},{"path":"introduction.html","id":"an-example","chapter":"1 Introduction","heading":"1.1.4 An example","text":"TODO: https://cran.r-project.org/web/packages/rdflib/vignettes/rdf_intro.html","code":""},{"path":"creating-linked-data.html","id":"creating-linked-data","chapter":"2 Creating linked data","heading":"2 Creating linked data","text":"","code":""},{"path":"creating-linked-data.html","id":"tidy-data","chapter":"2 Creating linked data","heading":"2.1 Tidy(ish) data","text":"TODO:https://r4ds..co.nz/tidy-data.htmlSome sort unpivotr example going spreadsheet tidy data.","code":"\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(tidyr)\n\nset.seed(1) # Used to control randomness in the examples\n\ndf <- tibble(\n        geography = c(\"W92000001\", \"E92000001\"),\n        `2015` = rnorm(2),\n        `2016` = rnorm(2),\n        `2017` = rnorm(2),\n        `2018` = rnorm(2),\n        `2019` = rnorm(2),\n        `2020` = rnorm(2),\n        `2021` = rnorm(2)\n    )\n\ndf\n#> # A tibble: 2 × 8\n#>   geography `2015` `2016` `2017` `2018` `2019` `2020` `2021`\n#>   <chr>      <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n#> 1 W92000001 -0.626 -0.836  0.330  0.487  0.576  1.51  -0.621\n#> 2 E92000001  0.184  1.60  -0.820  0.738 -0.305  0.390 -2.21\ndf %>% pivot_longer(\n    cols = !geography,\n    names_to = \"year\",\n    names_transform = list(year = as.numeric)\n)\n#> # A tibble: 14 × 3\n#>   geography  year  value\n#>   <chr>     <dbl>  <dbl>\n#> 1 W92000001  2015 -0.626\n#> 2 W92000001  2016 -0.836\n#> 3 W92000001  2017  0.330\n#> 4 W92000001  2018  0.487\n#> 5 W92000001  2019  0.576\n#> 6 W92000001  2020  1.51 \n#> # … with 8 more rows"},{"path":"creating-linked-data.html","id":"dates-and-times","chapter":"2 Creating linked data","heading":"2.1.1 Dates and times","text":"TODO:Explain reference.data.gov.uk friendly way.separate months vs. years vs. quarters?service offers two main sets calendars:Calendar intervals, aligning 1st January.“Government” calendar intervals, aligning 1st April.Calendar weeks government weeks begin Monday, first week containing 4th January 4th April respectively.TODO: types year e.g. academic years.","code":"<http://reference.data.gov.uk/id/year/2021>\n    a                               interval:Year , interval:CalendarYear , scv:Dimension ;\n    rdfs:comment                    \"The British calendar year of 2021\"@en ;\n    rdfs:label                      \"British Year:2021\"@en ;\n    scv:max                         \"2021-12-31\"^^xsd:date ;\n    scv:min                         \"2021-01-01\"^^xsd:date ;\n    time:intervalContains           <http://reference.data.gov.uk/id/month/2021-01>, \n        <http://reference.data.gov.uk/id/month/2021-02>,\n        <http://reference.data.gov.uk/id/month/2021-03,\n        # ...\n    .<http://reference.data.gov.uk/id/government-year/2021-2022>\n    a                               interval:Year , scv:Dimension , interval:BusinessYear ;\n    rdfs:comment                    \"The Modern HMG calendar year of 2021-2022\"@en ;\n    rdfs:label                      \"Modern HMG Year:2021-2022\"@en ;\n    scv:max                         \"2022-03-31\"^^xsd:date ;\n    scv:min                         \"2021-04-01\"^^xsd:date ;\n    time:intervalContains           <http://reference.data.gov.uk/id/month/2021-04>, \n        <http://reference.data.gov.uk/id/month/2021-05>,\n        <http://reference.data.gov.uk/id/month/2021-06>,\n        # ...\n    ."},{"path":"creating-linked-data.html","id":"uk-geographies","chapter":"2 Creating linked data","heading":"2.1.2 UK geographies","text":"TODO: Explain statistics.data.gov.uk friendly way.","code":""},{"path":"creating-linked-data.html","id":"multiple-measures","chapter":"2 Creating linked data","heading":"2.1.3 Multiple Measures","text":"TODO: Explain pivot wide, multiple measure dataframe long, measure-dimension dataframe.","code":"\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(tidyr)\n\nset.seed(1) # Used to control randomness in the examples\n\ndf <- expand_grid(\n        year = 2020:2021,\n        geography = c(\"W92000001\", \"E92000001\")) %>%\n    mutate(\n        population = round(1000000 + rnorm(2 * 2) * 10000),\n        gdp = round(1000000 + rnorm(2 * 2) * 10000))\n\ndf\n#> # A tibble: 4 × 4\n#>    year geography population     gdp\n#>   <int> <chr>          <dbl>   <dbl>\n#> 1  2020 W92000001     993735 1003295\n#> 2  2020 E92000001    1001836  991795\n#> 3  2021 W92000001     991644 1004874\n#> 4  2021 E92000001    1015953 1007383\ndf %>% pivot_longer(\n    cols = c(\"population\", \"gdp\"),\n    names_to = \"measure_type\"\n)\n#> # A tibble: 8 × 4\n#>    year geography measure_type   value\n#>   <int> <chr>     <chr>          <dbl>\n#> 1  2020 W92000001 population    993735\n#> 2  2020 W92000001 gdp          1003295\n#> 3  2020 E92000001 population   1001836\n#> 4  2020 E92000001 gdp           991795\n#> 5  2021 W92000001 population    991644\n#> 6  2021 W92000001 gdp          1004874\n#> # … with 2 more rows"},{"path":"creating-linked-data.html","id":"hierarchies","chapter":"2 Creating linked data","heading":"2.1.4 Hierarchies","text":"TODO: parent -> child relationship dataset. need make explicit columns orthogonal one another.","code":"\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(tidyr)\nlibrary(stringr)\n\nset.seed(1) # Used to control randomness in the examples\n\ndf1 <- expand_grid(\n        year = 2020:2021,\n        local_authority = c(\n            \"W06000015\", # Cardiff\n            \"W06000011\"  # Swansea\n    )) %>%\n    mutate(country = \"W92000001\", .before = local_authority) %>%\n    mutate(value = rnorm(2 * 2))\n\ndf2 <- expand_grid(\n        year = 2020:2021,\n        country = \"W92000001\",\n        local_authority = NA\n    ) %>%\n    mutate(value = rnorm(2 * 1))\n\ndf <- bind_rows(df1, df2)\n\ndf\n#> # A tibble: 6 × 4\n#>    year country   local_authority  value\n#>   <int> <chr>     <chr>            <dbl>\n#> 1  2020 W92000001 W06000015       -0.626\n#> 2  2020 W92000001 W06000011        0.184\n#> 3  2021 W92000001 W06000015       -0.836\n#> 4  2021 W92000001 W06000011        1.60 \n#> 5  2020 W92000001 NA               0.330\n#> 6  2021 W92000001 NA              -0.820\ndf %>%\n    mutate(\n        geography = coalesce(local_authority, country), \n        .after = local_authority\n    ) %>%\n    select(-local_authority, -country)\n#> # A tibble: 6 × 3\n#>    year geography  value\n#>   <int> <chr>      <dbl>\n#> 1  2020 W06000015 -0.626\n#> 2  2020 W06000011  0.184\n#> 3  2021 W06000015 -0.836\n#> 4  2021 W06000011  1.60 \n#> 5  2020 W92000001  0.330\n#> 6  2021 W92000001 -0.820\n# TODO: Turn this into a proper function.\nhierarchy <- df %>%\n    select(parent_notation = country, notation = local_authority)\n\nnotations <- unique(c(hierarchy$notation, hierarchy$parent_notation))\nnotations <- notations[!is.na(notations)]\n\ncodelist <- tibble(notation = notations) %>%\n    left_join(hierarchy, by = \"notation\")\n\ncodelist\n#> # A tibble: 5 × 2\n#>   notation  parent_notation\n#>   <chr>     <chr>          \n#> 1 W06000015 W92000001      \n#> 2 W06000015 W92000001      \n#> 3 W06000011 W92000001      \n#> 4 W06000011 W92000001      \n#> 5 W92000001 NA"},{"path":"creating-linked-data.html","id":"statistical-markers","chapter":"2 Creating linked data","heading":"2.1.5 Statistical markers","text":"TODO: deal missing values, marks indicate non-disclosure etc.UK Government Statistical Service provides advice using symbols shorthand statistical tables. Previously, involved using symbols :, * † describe things like observation suppressed due non disclosure statistical significance. New draft guidance longer recommends use specific symbols, instead recommends using letters [c] [x]. refer markers.notice R interpreted value column containing characters rather numbers due introduction [c] symbol. causes unideal behaviour trying use data compute statistics.require data separated value column marker column, marker column including sorts symbols. also require marker column limited containing one marker . need mark observations multiple markers, advice creating multiple columns, one marker.","code":"\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(tidyr)\n\nset.seed(1) # Used to control randomness in the examples\n\ndf <- expand_grid(year = 2020:2021,\n                  geography = c(\"W92000001\", \"E92000001\")) %>%\n    mutate(value = rnorm(2 * 2)) %>%\n    rowwise() %>%\n    mutate(value = sample(c(value, \"[c]\"), size = 1)) %>%\n    ungroup()\n\ndf\n#> # A tibble: 4 × 3\n#>    year geography value             \n#>   <int> <chr>     <chr>             \n#> 1  2020 W92000001 [c]               \n#> 2  2020 E92000001 [c]               \n#> 3  2021 W92000001 -0.835628612410047\n#> 4  2021 E92000001 1.59528080213779\nmean(df$value)\n#> Warning in mean.default(df$value): argument is not numeric or logical: returning\n#> NA\n#> [1] NA\n# TODO: Turn this into a proper function.\nextract_markers <- function(x) {\n  x[!suppressWarnings(is.na(as.numeric(x)))] <- NA\n  return(x)\n}\n\ndf %>%\n    mutate(\n        marker = extract_markers(value),\n        value = suppressWarnings(as.numeric(value))\n    )\n#> # A tibble: 4 × 4\n#>    year geography  value marker\n#>   <int> <chr>      <dbl> <chr> \n#> 1  2020 W92000001 NA     [c]   \n#> 2  2020 E92000001 NA     [c]   \n#> 3  2021 W92000001 -0.836 NA    \n#> 4  2021 E92000001  1.60  NA"},{"path":"creating-linked-data.html","id":"representing-as-linked-data","chapter":"2 Creating linked data","heading":"2.2 Representing as linked data","text":"TODO: Explain create cube dataframe.Dimensions.Measures.Attributes.","code":"\nld_dataset(df,\n    title = \"My Dataset\",\n    description = \"This is a description of the dataset\",\n    columns = ld_spec(\n        period = dimension(),\n        country = dimension(),\n        value = measure()\n    )\n)"},{"path":"creating-linked-data.html","id":"csv-on-the-web-csvw","chapter":"2 Creating linked data","heading":"2.2.1 CSV on the Web (CSVW)","text":"TODO: Explain CSV Web (CSVW) format.","code":""},{"path":"creating-linked-data.html","id":"examples","chapter":"2 Creating linked data","heading":"2.3 Examples","text":"","code":""},{"path":"creating-linked-data.html","id":"quarterly-stamp-duty-land-tax-sdlt-statistics","chapter":"2 Creating linked data","heading":"2.3.1 Quarterly Stamp Duty Land Tax (SDLT) statistics","text":"take extract Table_2a Quarterly Stamp Duty Land Tax (SDLT) statistics.can see looks like cross tabulation year transaction details. make tidy, transaction details belong column.example interesting closer inspection can see transaction details contain two pieces information, type transaction (e.g. liable transactions HRAD transactions), price band transactions (£250k, £250k £500k).Additionally, sources’ footnotes mention data 2020-21 provisional.approach :Pivot dataframe longer format.Split column headers two pieces information, transaction type transaction price band.Explicitly mark provisional data data.","code":"\n# https://www.gov.uk/government/statistics/quarterly-stamp-duty-land-tax-sdlt-statistics\n\ndf <- tibble::tibble(\n  `Financial Year`                                  = c(\"2019-20\", \"2020-21\"),\n  `All liable transactions under £250K`             = c(290200,    157100),\n  `HRAD transactions under £250K`                   = c(135400,    117600),\n  `All liable transactions between £250K and £500K` = c(279600,    98500),\n  `HRAD transactions between £250K and £500K`       = c(56100,     52800)\n)\n\nknitr::kable(df)\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(tidyr)\nlibrary(stringr)\n\ntidy_df <- df %>%\n  pivot_longer(cols = !`Financial Year`,\n               values_to = \"transactions\") %>%\n  # https://www.statworx.com/de/blog/strsplit-but-keeping-the-delimiter/\n  separate(\n    name,\n    into = c(\"transaction_type\", \"transaction_price_band\"),\n    sep = \"(?=under |between )\"\n  ) %>%\n  rename(financial_year = `Financial Year`) %>%\n  mutate(\n    transaction_type = str_trim(transaction_type),\n    transaction_price_band = str_to_sentence(transaction_price_band)\n  ) %>%\n  mutate(marker = case_when(financial_year == \"2020-21\" ~ \"[p]\"))\n\ntidy_df\n#> # A tibble: 8 × 5\n#>   financial_year transaction_type      transaction_price_ba… transactions marker\n#>   <chr>          <chr>                 <chr>                        <dbl> <chr> \n#> 1 2019-20        All liable transacti… Under £250k                 290200 NA    \n#> 2 2019-20        HRAD transactions     Under £250k                 135400 NA    \n#> 3 2019-20        All liable transacti… Between £250k and £5…       279600 NA    \n#> 4 2019-20        HRAD transactions     Between £250k and £5…        56100 NA    \n#> 5 2020-21        All liable transacti… Under £250k                 157100 [p]   \n#> 6 2020-21        HRAD transactions     Under £250k                 117600 [p]   \n#> # … with 2 more rows"},{"path":"reference-data.html","id":"reference-data","chapter":"3 Reference data","heading":"3 Reference data","text":"TODO:Best practices SKOS.https://confluence.csiro.au/public/VOCAB/vocabulary-services/publishing-vocabularies/best-practice--formalizing--skos-vocabularyIf creating codelist intend share, include categories /unknown/?best practice deriving codes notations SKOS?Versioning?","code":""},{"path":"harmonisation.html","id":"harmonisation","chapter":"4 Harmonisation","heading":"4 Harmonisation","text":"TODO: harmonisation important.find codelistsHow use codelists“Forking” codelist, amending adding new itemsExtending R library new presets reuse.","code":""},{"path":"architecture.html","id":"architecture","chapter":"5 Architecture","heading":"5 Architecture","text":"TODO:chance talk archetecture decisions ’ve made.chance talk archetecture decisions ’ve made.use DCAT - cube distribution dataset.use DCAT - cube distribution dataset.qb ICs ignore .qb ICs ignore .Long data vs. wide data, measure dimensions.Long data vs. wide data, measure dimensions.Can explain features wished CSVW e.g. custom (???).Can explain features wished CSVW e.g. custom (???).Reference data architecture - debates ’ve around codelists.Reference data architecture - debates ’ve around codelists.OWL harmonisation.OWL harmonisation.Versioning.Versioning.","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"Berners-Lee, Tim. 2006. “Linked Data - Design Issues.” www.w3.org; W3C. https://www.w3.org/DesignIssues/LinkedData.html.Kalampokis, Evangelos, Areti Karamanou, Konstantinos Tarabanis. 2019. “Interoperability Conflicts Linked Open Statistical Data.” Information 10 (8). https://doi.org/10.3390/info10080249.Poblet, Marta, Pompeu Casanovas, Víctor Rodríguez-Doncel. 2019. “Introduction Linked Data.” Linked Democracy: Foundations, Tools, Applications, 1–25. Cham: Springer International Publishing. https://doi.org/10.1007/978-3-030-13363-4_1.“RDF 1.1 Primer.” 2014. www.w3.org. https://www.w3.org/TR/rdf11-primer/.“SemanticWebCerealBox - W3c Wiki.” 2004. www.w3.org. https://www.w3.org/wiki/SemanticWebCerealBox.","code":""}]
